proto main 0;;

type Attribute = [tagS valueS];;
type Element = [nameS attribute content];;
type Content = ContentElement Element | ContentText S;;
type XmlResponse = [inXml EndStrS];;
type AttributeResponse = [ListAttributes toAnalyseS];;

fun BuildAttributes XmlAttr =
	if (strlen XmlAttr) != 0 then (
		let [ListAttributes:nil toAnalyseS:nil] -> Resp in (
			if (strget XmlAttr 0) == 32 /* Caractere espace */ then ( // Si on a un espace au début de la chaine, on ne le prend pas en compte
				set Resp = BuildAttributes strsub XmlAttr 1 (strlen XmlAttr)
			)else if (strget XmlAttr 0) == '>' || ((strget XmlAttr 0) == '/' && (strget XmlAttr 1) == '>') then ( // Si on arrive à la fin de la balise contenant des attributs on retourne une réponse vide
				set Resp = [ListAttributes:nil toAnalyseS:(strsub XmlAttr 0 strlen XmlAttr)]
			)else (
				let (strfind XmlAttr 0 "=" 0 nil)+2 -> EqualTo in
				let strget XmlAttr (EqualTo-1) -> QuoteType in
				let 0 -> PosQuote in
				let [tagS:nil valueS:nil] -> NewAttribute in
				let "'" -> Quote in (
					if QuoteType != 39 /* Simple Quote */ then set Quote = "\""; // Si il ne s'agit pas d'un Simple, on recherche le double
					set PosQuote = strfind XmlAttr EqualTo Quote 0 nil; // On détermine le prochaine Quote (Double ou Simple)
					set NewAttribute.tagS = strsub XmlAttr 0 EqualTo-2;
					set NewAttribute.valueS = strsub XmlAttr EqualTo (PosQuote-EqualTo);
					let BuildAttributes strsub XmlAttr (PosQuote+1) strlen XmlAttr -> GetAll in (
						set GetAll.ListAttributes = NewAttribute::GetAll.ListAttributes;
						set Resp = GetAll
					)
				)
			)
		)
	)
;;

// First function, prepare the string xml
fun ReverseElements List =
	let hd List -> Maille in
	let nil -> NewList in (
		while Maille != nil do (
			if NewList == nil then
				set NewList = Maille::nil
			else
				set NewList = Maille::NewList;
			set List = tl List;
			set Maille = hd List
		);
		NewList
	)
;;



fun ParseXML XML =
	if (strlen XML) != 0 then (
		let [inXml:nil EndStrS:nil] -> XmlResp in
		let strlen XML -> StrLen in
		let strlen XML -> NewLen in
		let strfind XML 0 "<" 0 nil -> FirstElement in
		(
			// In an Element (could be <xml> or <xml attribute=''>...)
			if FirstElement == 0 then
			(
				let strfind XML 0 " " 0 nil -> Space in
				let strfind XML 0 ">" 0 nil -> Ending in
				let nil -> Name in
				let nil -> Attributes in
				let nil -> Contents in
				let nil -> NewList in
				let nil -> ToAnalyseAfter in
				let nil -> ToAnalyseNow in
				(
					if Space == nil then set Space = Ending+1;
					if Ending < Space then ( // we have <balise>
						set Name = strsub XML 1 (Ending-1);
						set NewLen = (strfind XML 0 (strcatlist "</"::Name::">"::nil) 0 nil);
						
						if NewLen != nil then ( // si on ne trouve pas la fin, on ne donne rien à analyser
							set ToAnalyseNow = strsub XML (Ending+1) (NewLen-Ending-1);
							set ToAnalyseAfter = strsub XML (NewLen + (strlen Name) + 3) strlen XML
						)else(
							set ToAnalyseAfter = XML
						);
						0
					)else( // we have an attribute
						set Name = strsub XML 1 (Space-1);
						
						set NewLen = (strfind XML 0 (strcatlist "</"::Name::">"::nil) 0 nil);
						if NewLen != nil then set StrLen = NewLen;
						
						// Get attributes
						let BuildAttributes (strsub XML (Space+1) (StrLen-Space-1)) -> AttributesResp in (
							set Attributes = AttributesResp.ListAttributes;
							set ToAnalyseNow = AttributesResp.toAnalyseS
						);
						// Check balise
						if (strfind ToAnalyseNow 0 "/>" 0 nil) == 0 then ( // we got this : <balise atr="" />
							Secholn "tic";
							set XmlResp.inXml = ContentElement [nameS:Name attribute:Attributes content:nil];
							set XmlResp.EndStrS = strsub ToAnalyseNow 2 strlen ToAnalyseNow;
							set ToAnalyseAfter = XmlResp.EndStrS;
							set ToAnalyseNow = nil
						)else if NewLen != nil then ( // si on ne trouve pas la fin, on ne donne rien à analyser	
							Secholn "tac";
							set ToAnalyseNow = strsub ToAnalyseNow 1 strlen ToAnalyseNow;
							set ToAnalyseAfter = strsub XML (NewLen + (strlen Name) + 3) strlen XML
						)else (
							set ToAnalyseNow = nil;
							set ToAnalyseAfter = XML
						);
						0
					);
					
					if ToAnalyseNow != nil then (
						let ParseXML ToAnalyseNow -> NewContent in
						(
								while NewContent.EndStrS != nil do
								(
									if Contents == nil then		set Contents = (NewContent.inXml)::nil
									else						set Contents = (NewContent.inXml)::Contents;
									set NewContent = ParseXML NewContent.EndStrS
								);
								if NewContent != nil then (
									if Contents == nil then		set Contents = (NewContent.inXml)::nil
									else						set Contents = (NewContent.inXml)::Contents
								)
						);
						set Contents = ReverseElements Contents; // On renverse les elements pour les remettres dans le bon ordre
						set XmlResp.inXml = ContentElement [nameS:Name attribute:Attributes content:Contents];
						set XmlResp.EndStrS = ToAnalyseAfter
					)else (
						if XmlResp.inXml == nil then (
							set XmlResp.inXml = ContentText ToAnalyseAfter;
							set XmlResp.EndStrS = nil
						)
					)
				);
				0
			// Not in an Element (could be text...)
			)else if FirstElement != nil then // There is a balise after
			(
				set XmlResp.inXml = ContentText strsub XML 0 FirstElement;
				set XmlResp.EndStrS	= strsub XML FirstElement StrLen;
				0
			)else ( // There is no balise after
				set XmlResp.inXml = ContentText strsub XML 0 strlen XML;
				set XmlResp.EndStrS	= nil;
				0
			);
		if (strlen XmlResp.EndStrS) == 0 then set XmlResp.EndStrS = nil;
		XmlResp
		
		)
	)
;;

// Retourne toutes les racines
fun ParseAll XML =
	let nil -> ListRoots in
	let ParseXML XML -> Stream in
	let 0 -> step in
	(
		if Stream.EndStrS == nil then	set ListRoots = (Stream.inXml)::nil;
		while Stream.EndStrS != nil do
		(
			set step = 1 + step;
			if ListRoots == nil then	set ListRoots = (Stream.inXml)::nil
			else						set ListRoots = (Stream.inXml)::ListRoots;
			set Stream = ParseXML Stream.EndStrS
		);
		if step != 0 then (
			if ListRoots == nil then	set ListRoots = (Stream.inXml)::nil
			else						set ListRoots = (Stream.inXml)::ListRoots
		);
		set ListRoots = ReverseElements ListRoots
	)
;;




var XML;;

fun print_r Xml First =
	let match Xml with
		(ContentElement Balise ->
			Secho "    |";
			for i=0; i<First do Secho ".";
			Secholn (Balise.nameS);
			let Balise.attribute -> ListAttribut in
			let Balise.content -> Recur in
			(
				while (hd ListAttribut) != nil do (
					let hd ListAttribut -> Attr in (
						Secho "    | ";
						for i=0; i<First do Secho " ";
						Secho Attr.tagS;
						Secho " => ";
						Secholn Attr.valueS
					);
					set ListAttribut = tl ListAttribut
				);
				while (hd Recur) != nil do (
					print_r (hd Recur) (First+2);
					set Recur = tl Recur
				)
			);
		0)|
		(ContentText Texte ->
			Secho "    !";
			for i=0; i<First do Secho ".";
			Secholn Texte;
		0)|
		(_ -> -1)-> Expect in
		if Expect == -1 then Secholn "Erreur"
;;

fun main =

	set XML = "stream:stream xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' id='4139235255' from='localhost' version='1.0' xml:lang='en'><stream:features><mechanisms xmlns='urn:ietf:params:xml:ns:xmpp-sasl'><mechanism>DIGEST-MD5</mechanism><mechanism>PLAIN</mechanism></mechanisms><register xmlns='http://jabber.org/features/iq-register'/>HIP</stream:features>";
	let ParseAll XML -> ListContent in
	let hd ListContent -> HeadXml in
	let tl ListContent -> TailXml in
	(
		while HeadXml != nil do (
			Secholn "root|";
			print_r HeadXml 0;
			set HeadXml = hd TailXml;
			set TailXml = tl TailXml
		)			
	);
	
	0;;
