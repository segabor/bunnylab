proto main 0;;

// Chaine permettant de faire la transformation
var Base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";;

// Principe et exmple d'encodage
// http://fr.wikipedia.org/wiki/Base64
//ABCD
//A (65)     B (66)     C (67)     D (68)   (None) (None)
//01000001   01000010   01000011   01000100
//16 (Q)  20 (U)  9 (J)   3 (D)    17 (R) 0 (A)  NA (=) NA (=)
//010000  010100  001001  000011   010001 000000 000000 000000
//QUJDRA==

// Fonction permettant d'encoder en B64
fun StoB64 String =
	let "" -> B64Result in
	let 0 -> B64Len in
	let 0 -> B64Num in
	let 0 -> B64NumL in
	let 0 -> B64NumH in
	let 0 -> i in
	let 0 -> j in
	let 0 -> k in (	
		// Determine la taille et creer la chaine de caractere de retour
		set B64Len = ((strlen String) * 8) / 6 + 2;
		set B64Result = strnew (B64Len+1);
		for i=0; i<=B64Len do ( strset B64Result i 0 );
		set k = 0;
		
		for i=0; i<(strlen String) do (
			set j = i % 3;						// L'encodage comporte 3 phases par cycle
			set B64Num = strget String i;		// On recupere la lettre
			if j == 0 then (
				set B64NumH = B64Num >> 2;
				set B64NumL = (B64Num&0x03) << 4;
				strset B64Result k (strget Base64 B64NumH);
				set k = k+1
			)else if j == 1 then (
				set B64NumL = B64NumL | (B64Num >> 4);
				set B64NumH = (B64Num&0x0F) << 2;
				strset B64Result k (strget Base64 B64NumL);
				set k = k+1
			)else (
				set B64NumH = B64NumH | (B64Num >> 6);
				set B64NumL = (B64Num&0x3F);
				strset B64Result k (strget Base64 B64NumH);
				strset B64Result (k+1) (strget Base64 B64NumL);
				set k = k+2
			)
		);		
		// Si il reste des caractères non écrit, il sont complété avec des 0 et écris dans le résultat
		if j == 0 then		(strset B64Result k (strget Base64 B64NumL); strset B64Result k+1 61; strset B64Result k+2 61)
		else if j == 1 then	(strset B64Result k (strget Base64 B64NumH); strset B64Result k+1 61);		
		B64Result
	);;


// Fonction permettant de décoder du B64
fun B64toS String =
	let "" -> B64Result in
	let 0 -> B64Len in
	let 0 -> B64Num in
	let 0 -> B64NumL in
	let 0 -> B64NumH in
	let 0 -> i in
	let 0 -> j in
	let 0 -> k in (
		// Determine la taille et creer la chaine de caractere de retour
		set B64Len = (((strlen String)) * 6) / 8;
		set B64Result = strnew (B64Len);
		for i=0; i<B64Len do ( strset B64Result i 0 );
		set k = 0;
		
		for i=0; i<(strlen String) do (
			set j = i % 4;													// On calcule le cas
			set B64Num = strfind Base64 0 (strsub String i 1) 0 nil;		// On recupere la lettre
			if B64Num != nil then (											// On ne prend pas en compte les == et autres caractères qui ne sont pas dans la chaine
				if j == 0 then (
					set B64NumH = B64Num << 2
				)else if j == 1 then (
					set B64NumH = B64NumH | ((B64Num&0x30) >> 4);
					set B64NumL = (B64Num&0x0F) << 4;
					strset B64Result k B64NumH;
					set k = k+1
				)else if j == 2 then (
					set B64NumL = B64NumL | ((B64Num&0x3C) >> 2);
					set B64NumH = (B64Num&0x03) << 6;
					strset B64Result k B64NumL;
					set k = k+1
				)else (
					set B64NumH = B64NumH | B64Num;
					strset B64Result k B64NumH;
					set k = k+1
				)
			)
		);
		B64Result
	);;

	
	
	
	
	
	
	
	
var Chaine;;
	
fun main =
	
	set Chaine = "ABCDEG";
	Secholn StoB64 Chaine;
	Secholn B64toS StoB64 Chaine;
0;;
	
